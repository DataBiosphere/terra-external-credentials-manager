openapi: 3.0.3
info:
  title: Terra External Credentials Manager
  description: A manager for external credentials
  version: 0.0.1
paths:
  /api/admin/v1/{provider}:
    parameters:
      - $ref: '#/components/parameters/providerParam'
    put:
      summary: Link a user to an external account with a fake refresh token. For eRA Commons only.
      tags: [ admin ]
      operationId: putLinkedAccountWithFakeToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLinkInfo'
        required: true
      responses:
        '204':
          description: Linked Account Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Unlink a user from an external account
      tags: [ admin ]
      operationId: adminDeleteLinkedAccount
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              description: The Sam User Id for a user

        required: true
      responses:
        '204':
          description: Linked Account Deleted
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/admin/v1/{provider}/userForExternalId/{externalId}:
    parameters:
      - $ref: '#/components/parameters/providerParam'
      - $ref: '#/components/parameters/externalIdParam'
    get:
      summary: Get the Linked Account for the External ID
      tags: [ admin ]
      operationId: getLinkedAccountForExternalId
      responses:
        '200':
          description: The Linked Account for the External ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLinkInfo'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          description: User not found for the External ID
        '500':
          $ref: '#/components/responses/ServerError'
  /api/admin/v1/{provider}/activeAccounts:
    parameters:
      - $ref: '#/components/parameters/providerParam'
    get:
      summary: Get all active linked accounts for a provider
      tags: [ admin ]
      operationId: getActiveLinkedAccounts
      responses:
        '200':
          description: All Linked Accounts for a given provider
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminLinkInfo'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/oauth/v1/providers:
    get:
      summary: Lists the available OAuth providers.
      tags: [ oauth ]
      operationId: listProviders
      responses:
        '200':
          description: A JSON array of providers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          $ref: '#/components/responses/ServerError'
  /api/oauth/v1/{provider}:
    parameters:
      - $ref: '#/components/parameters/providerParam'
    get:
      summary: Returns info about the linked account for the provider.
      tags: [ oauth ]
      operationId: getLink
      responses:
        '200':
          $ref: '#/components/responses/LinkInfoResponse'
        '404':
          $ref: '#/components/responses/LinkNotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete the account link for the provider, if an account has been linked.
      tags: [ oauth ]
      operationId: deleteLink
      description: Requires an authenticated user.
      responses:
        '204':
          description: Deletes the refresh token and revokes it with the provider.
        '404':
          $ref: '#/components/responses/LinkNotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/oauth/v1/{provider}/authorization-url:
    parameters:
      - $ref: '#/components/parameters/providerParam'
      - $ref: '#/components/parameters/redirectUriParam'
      - $ref: '#/components/parameters/additionalStateParam'
    get:
      summary: Builds an OAuth authorization URL that a user must use to initiate the OAuth dance.
      tags: [ oauth ]
      operationId: getAuthorizationUrl
      description: First step to link a new provider. Creates a 1 time use link. There can only be 1 active link per user per provider. The last link created will invalidate any prior links.
      responses:
        '200':
          description: The authorization URL
          content:
            text/plain:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/ServerError'
  /api/oauth/v1/{provider}/oauthcode:
    parameters:
      - $ref: '#/components/parameters/providerParam'
      - $ref: '#/components/parameters/stateParam'
      - name: oauthcode
        description: oauth code returned by identity provider
        in: query
        schema:
          type: string
    post:
      summary: Link the user's account with the provider.
      tags: [ oauth ]
      operationId: createLink
      description: Response same as GET /api/oidc/v1/{provider}. Code from the GET /api/oauth/v1/{provider}/authorization-url goes here.
      responses:
        '200':
          $ref: '#/components/responses/LinkInfoResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/oauth/v1/{provider}/access-token:
    parameters:
      - $ref: '#/components/parameters/providerParam'
    get:
      summary: Return an access token from the provider.
      tags: [ oauth ]
      operationId: getProviderAccessToken
      description: Returns a String containing the user's Access Token from the provider
      responses:
        '200':
          description: The user's access token for the requested provider
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/oidc/v1/providers:
    get:
      summary: Lists the available OIDC providers.
      tags: [ oidc ]
      operationId: listProviders
      deprecated: true
      responses:
        '200':
          description: A JSON array of providers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          $ref: '#/components/responses/ServerError'

  /api/oidc/v1/{provider}:
    parameters:
      - $ref: '#/components/parameters/providerParam'
    get:
      summary: Returns info about the linked account for the provider.
      tags: [ oidc ]
      operationId: getLink
      deprecated: true
      responses:
        '200':
          $ref: '#/components/responses/LinkInfoResponse'
        '404':
          $ref: '#/components/responses/LinkNotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete the account link for the provider, if an account has been linked.
      tags: [ oidc ]
      operationId: deleteLink
      description: Requires an authenticated user.
      deprecated: true
      responses:
        '204':
          description: Deletes the refresh token and revokes it with the provider.
        '404':
          $ref: '#/components/responses/LinkNotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/oidc/v1/{provider}/authorization-url:
    parameters:
      - $ref: '#/components/parameters/providerParam'
      - $ref: '#/components/parameters/redirectUriParam'
      - $ref: '#/components/parameters/additionalStateParam'
    get:
      summary: Builds an OAuth authorization URL that a user must use to initiate the OAuth dance.
      tags: [ oidc ]
      deprecated: true
      operationId: getAuthUrl
      description: First step to link a new provider. Creates a 1 time use link. There can only be 1 active link per user per provider. The last link created will invalidate any prior links.
      responses:
        '200':
          description: The authorization URL
          content:
            application/json:
              schema:
                type: string
        '500':
          $ref: '#/components/responses/ServerError'

  /api/oidc/v1/{provider}/oauthcode:
    parameters:
      - $ref: '#/components/parameters/providerParam'
      - $ref: '#/components/parameters/stateParam'
      - name: oauthcode
        description: oauth code returned by identity provider
        in: query
        schema:
          type: string
    post:
      summary: Link the user's account with the provider.
      tags: [ oidc ]
      deprecated: true
      operationId: createLink
      description: Response same as GET /api/oidc/v1/{provider}. Code from the GET /api/oidc/v1/{provider}/authorization-url goes here.
      responses:
        '200':
          $ref: '#/components/responses/LinkInfoResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/oidc/v1/{provider}/passport:
    parameters:
      - $ref: '#/components/parameters/passportProviderParam'
    get:
      summary: Get the original passport from this provider
      tags: [ oidc ]
      operationId: getProviderPassport
      description: Gets passport signed by provider, not Terra, containing only visas from provider. Passport and visas should be valid.
      responses:
        '200':
          description: A base64-encoded passport
          content:
            text/plain:
              schema:
                type: string
                format: base64
        '404':
          description: provider does not support passports
        '500':
          $ref: '#/components/responses/ServerError'

  /api/fenceAccountKey/v1/{provider}:
    parameters:
      - $ref: '#/components/parameters/providerParam'
    get:
      summary: Returns a service account json key to use to access objects for the fence account provider as the linked account.
      tags: [ fenceAccountKey ]
      operationId: getFenceAccountKey
      responses:
        '200':
          description: A JSON service account key
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Provider does not support service account keys
        '500':
          $ref: '#/components/responses/ServerError'

  /passport/v1/validate:
    post:
      summary: Given passports and criteria validate that at least one passport is valid and has a visa that matches at least one crition
      tags: [passport]
      operationId: validatePassport
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ValidatePassportRequest'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/ValidatePassportResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/status/v1:
    get:
      summary: Check status of the service.
      tags: [ public ]
      operationId: getStatusDetail
      security: [ ]
      responses:
        '200':
          $ref: '#/components/responses/SystemStatusDetailResponse'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/SystemStatusDetailResponse'
  /status:
    get:
      deprecated: true
      summary: Check status of the service.
      tags: [ public ]
      operationId: getStatus
      security: [ ]
      responses:
        '200':
          $ref: '#/components/responses/SystemStatusResponse'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/SystemStatusResponse'
  /version:
    get:
      summary: Get version info of the deployed service.
      tags: [ public ]
      operationId: getVersion
      security: [ ]
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionProperties'
        '404':
          description: "Version not configured"
        '500':
          $ref: '#/components/responses/ServerError'
components:
  parameters:
    passportProviderParam:
      name: provider
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/PassportProvider'
    providerParam:
      name: provider
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Provider'
    externalIdParam:
      name: externalId
      in: path
      required: true
      schema:
        type: string
    userIdParam:
      name: userId
      description: the Sam User Id for a user
      in: query
      required: true
      schema:
        type: string
    redirectUriParam:
      name: redirectUri
      description: oidc redirect uri
      in: query
      required: true
      example: "http://localhost:9000/fence-callback"
      schema:
        type: string
    additionalStateParam:
      name: additionalState
      description: Information to include in the oidc authorization state in the form of key/value pairs
      in: query
      required: false
      content:
        application/json:
          schema:
            type: object
    stateParam:
      name: state
      description: oidc authorization state, must be identical to state embedded in response from getAuthUrl
      in: query
      required: false
      schema:
        type: string

  responses:
    LinkInfoResponse:
      description: A JSON object including the external user id and expiration timestamp
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LinkInfo'
    LinkNotFound:
      description: Unable to find a link for the user to the provider. Consider re-linking with an oauthcode.

    ValidatePassportResponse:
      description: results of visa validation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidatePassportResult'

    SystemStatusResponse:
      description: A JSON description of the subsystems and their statuses.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatus'

    SystemStatusDetailResponse:
      description: A JSON description of the subsystems and their statuses.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatusDetail'

    # Error Responses
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

  schemas:
    AdminLinkInfo:
        type: object
        description: Linked Account for a user
        required: [ userId, linkedExternalId, linkExpireTime ]
        properties:
            userId:
              type: string
            linkedExternalId:
              type: string
            linkExpireTime:
              type: string
              format: date-time
    PassportProvider:
      description: Enum containing valid passport providers.
      type: string
      enum:
        - ras
    Provider:
      description: Enum containing valid identity providers.
      type: string
      enum:
        - ras
        - era-commons
        - github
        - fence
        - dcf-fence
        - kids-first
        - anvil
    LinkInfo:
      type: object
      required: [ externalUserId, expirationTimestamp ]
      properties:
        externalUserId:
          type: string
        expirationTimestamp:
          type: string
          format: date-time
        authenticated:
          type: boolean
        additionalState:
          type: object
    ErrorReport:
      type: object
      required: [ message, statusCode ]
      properties:
        message:
          type: string
        statusCode:
          type: integer

    SystemStatus:
      required: [ ok, systems ]
      type: object
      properties:
        ok:
          type: boolean
          description: whether any system(s) need attention
        systems:
          type: object
          additionalProperties:
            type: boolean

    SystemStatusDetail:
      required: [ ok, systems ]
      type: object
      properties:
        ok:
          type: boolean
          description: whether any system(s) need attention
        systems:
          type: array
          items:
            $ref: '#/components/schemas/SubsystemStatusDetail'

    SubsystemStatusDetail:
      required: [ name, ok ]
      type: object
      properties:
        name:
          type: string
        ok:
          type: boolean
          description: whether the system is healthy
        messages:
          type: array
          items:
            type: string

    VersionProperties:
      type: object
      properties:
        gitTag:
          type: string
        gitHash:
          type: string
        github:
          type: string
        build:
          type: string

    ValidatePassportRequest:
      type: object
      required: [ passports, criteria ]
      properties:
        passports:
          description: JWT encoded passports
          type: array
          items:
            type: string
        criteria:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/RASv1Dot1VisaCriterion'

    ValidatePassportResult:
      type: object
      required: [valid]
      properties:
        valid:
          type: boolean
        matchedCriterion:
          oneOf:
            - $ref: '#/components/schemas/RASv1Dot1VisaCriterion'
        auditInfo:
          type: object
          additionalProperties:
            type: string

    VisaCriterion:
      type: object
      required: [ issuer, type ]
      properties:
        type:
          type: string
        issuer:
          type: string

    RASv1Dot1VisaCriterion:
      allOf:
        - $ref: '#/components/schemas/VisaCriterion'
        - description: 'Criteria for matching RAS v1.1 visas, visa `type` claim = "https://ras.nih.gov/visas/v1.1"'
          type: object
          properties:
            phsId:
              type: string
            consentCode:
              type: string

  securitySchemes:
    authorization:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            openid: open id authorization
            email: email authorization
            profile: profile authorization
    bearerAuth:
      type: http
      scheme: bearer

security:
  - authorization: [ openid, email, profile ]
  - bearerAuth: [ ]
